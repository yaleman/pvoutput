{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pvoutput","text":"<p>PVOutput.org python API module. Works with the R2 API version spec here.</p> <p>Get your API key from the account page on PVOutput</p>"},{"location":"#example-usage","title":"Example usage","text":"<p>Here's a quick code example:</p> <pre><code>    from pvoutput import PVOutput\n    import json\n    apikey = 'aaaaaabbbbbbccccccddddddeeeeeeffffffgggg'\n    systemid = 12345\n    pvo = PVOutput(apikey=apikey, systemid=systemid)\n    print(json.dumps(pvo.check_rate_limit(), indent=2))\n</code></pre> <p>Will give you output like this:</p> <pre><code>    {\n        \"X-Rate-Limit-Remaining\": \"271\",\n        \"X-Rate-Limit-Limit\": \"300\",\n        \"X-Rate-Limit-Reset\": \"1570597200\"\n    }\n</code></pre> <p>There are more example code snippets in the examples directory.</p>"},{"location":"#installing","title":"Installing","text":""},{"location":"#prod-ish-usage","title":"Prod-ish usage","text":"<p><code>pip install pvoutput</code> to install from pypi</p>"},{"location":"#dev-install-things","title":"Dev Install Things","text":"<pre><code>python -m virtualenv .venv\nsource .venv/bin/activate\npip install uv\nuv venv\n</code></pre>"},{"location":"#input-validation","title":"Input validation","text":"<p>This is handled by the <code>pvoutput.base.PVOutputBase.validate_data</code> function.</p> <p>It expects the input data and a dict of configuration parameters, which are described in the table below:</p> Field name Required Valid Types Description <code>type</code> Yes <code>Any</code> This is a python type object to match against the field type. <code>required</code> No <code>bool</code> This defines if the field is required. <code>description</code> No <code>Any</code> This is currently unused, but typically holds the description from the PVOutput API Docs <code>donation_required</code> No <code>bool</code> If set to true, and the user's not donated, it'll throw a <code>DonationRequired</code> exception if the user tries to use functionality that requires them to have donated. It's a whole thing. <code>maxlen</code> No <code>int</code> Maximum length of the field. ie. <code>if len(field) &gt; maxlen: raise ValueError</code> <code>maxval</code> No <code>int</code> Maximum value of the field. <code>minval</code> No <code>int</code> Minimum value of the field. <code>additional_validators</code> No <code>List[function]</code> A list of functions to run against the field, which should throw exceptions if something's wrong. <p>An example configuration</p> <pre><code>\"date_val\": {\n    \"required\": True,\n    \"description\": \"Date\",\n    \"type\": date,\n    \"donation_required\": False,\n    \"additional_validators\" : [\n        validate_delete_status_date\n    ]\n}\n</code></pre>"},{"location":"#contributing-testing","title":"Contributing / Testing","text":"<p><code>ruff</code>, <code>pytest</code> and <code>mypy</code> should all pass before submitting a PR.</p>"},{"location":"#license","title":"License","text":"<p>MIT License (see <code>LICENSE</code>), don't use this for anything you care about - I don't provide a warranty at all, and it'll likely steal your socks and underfeed your dog.</p>"},{"location":"#changelog","title":"Changelog","text":"<ul> <li>0.0.1 Initial version</li> <li>0.0.2 2019-10-12 Fixed some bugs</li> <li>0.0.3 2019-10-13 Added PVOutput.getstatus() which returns the current status as a dict</li> <li>0.0.4 2019-11-05 Code cleanup using sonarqube, added an error check for registernotification</li> <li>0.0.5 Asyncio things</li> <li>0.0.6 I broke the build when uploading to pypi, fixed in 0.0.7.</li> <li>0.0.7 2021-12-27 #117 fix for getstatus issues</li> <li>0.0.8 2022-01-02 @cheops did great work cleaning up a lot of my mess, and testing is much better.</li> <li>0.0.10 2022-08-27 Added explicit timeouts to HTTP connections in the synchronous client.</li> <li>0.0.11 2022-08-27 Added explicit timeouts to HTTP connections in the aiohttp client.</li> <li>0.0.12 (pending) 2023-10-10 Adding addbatchstatus</li> </ul>"},{"location":"api/","title":"API Documentation","text":"<p>Interface to the PVOutput API</p>"},{"location":"api/#pvoutput.PVOutput","title":"<code>PVOutput</code>","text":"<p>               Bases: <code>PVOutputBase</code></p> <p>This class provides an interface to the pvoutput.org API</p> Source code in <code>pvoutput/__init__.py</code> <pre><code>class PVOutput(PVOutputBase):\n    \"\"\"This class provides an interface to the pvoutput.org API\"\"\"\n\n    # pylint: disable=too-many-arguments\n    def __init__(\n        self,\n        apikey: str,\n        systemid: int,\n        donation_made: bool = False,\n        stats_period: int = 5,\n        session: Optional[requests.Session] = None,\n    ):\n        \"\"\"Setup code\n        :param apikey: API key (read or write)\n        :type apikey: str\n        :param systemid: system ID\n        :type systemid: int\n        :param donation_made: Whether to use the donation-required fields\n        :type donation_made: bool\n        \"\"\"\n        super().__init__(\n            apikey=apikey,\n            systemid=systemid,\n            donation_made=donation_made,\n            stats_period=stats_period,\n        )\n        self.session = session\n        if session is None:\n            self.session = requests.Session()\n\n    def _call(\n        self,\n        endpoint: str,\n        method: str = \"POST\",\n        **kwargs: Dict[str, Any],\n    ) -&gt; requests.Response:\n        \"\"\"Makes a call to a URL endpoint with the data/headers/method you require.\n\n        :param endpoint: The URL to call\n        :type endpoint: str\n\n        :param data: Data to send\n        :type data: dict\n\n        :param headers: Additional headers, if unset it'll use self._headers() which is the standard API key / systemid set (eg, self.check_rate_limit)\n        :type headers: dict\n\n        :param method: specify a method if you want to use something other than POST\n        :type method: str\n\n        :returns: The response object\n        :rtype: requests.Response\n\n        :raises TypeError: if the data you pass is of the wrong format.\n        :raises ValueError: if the call throws a HTTP 400 error.\n        :raises requests.exception: if method throws an exception.\n        \"\"\"\n\n        self.validate_data(kwargs, CALL_PARAMETERS)\n\n        if method == \"GET\":\n            response = requests.get(\n                endpoint,\n                data=kwargs.get(\"data\"),\n                headers=kwargs.get(\"headers\", self._headers()),\n                params=kwargs.get(\"params\"),\n                timeout=DEFAULT_REQUEST_TIMEOUT,\n            )\n        elif method == \"POST\":\n            response = requests.post(\n                endpoint,\n                data=kwargs.get(\"data\"),\n                headers=kwargs.get(\"headers\", self._headers()),\n                timeout=DEFAULT_REQUEST_TIMEOUT,\n            )\n        else:\n            raise UnknownMethodError(f\"unknown method {kwargs['method']}\")\n\n        if response.status_code == 400:\n            # TODO: work out how to get the specific response and provide useful answers\n            raise ValueError(f\"HTTP400: {response.text.strip()}\")\n        # likely errors - https://pvoutput.org/help/api_specification.html#error-messages\n        response.raise_for_status()\n        return response\n\n    def check_rate_limit(self) -&gt; Dict[str, str]:\n        \"\"\"Makes a call to the site, checking if you have hit the rate limit.\n\n        API spec: https://pvoutput.org/help/api_specification.html#rate-limits\n\n        :returns: the headers relating to the rate limit.\n        :rtype: dict\n        \"\"\"\n        headers = self._headers()\n        headers[\"X-Rate-Limit\"] = \"1\"\n\n        url, method = utils.URLS[\"getsystem\"]\n\n        response = self._call(endpoint=url, params={}, headers=headers, method=method)\n        retval = utils.get_rate_limit_header(response)\n        return retval\n\n    def addbatchstatus(self, data: str, c1: bool = False, n: bool = False) -&gt; requests.Response:\n        \"\"\"\n        # Add Batch Status Service\n\n        The Add Batch Status service adds up to 30 statuses in a single request.\n        See the documentation on the page for what it means, and what it responds with.\n        This hasn't been tested.\n        &lt;https://pvoutput.org/help/api_specification.html#add-batch-status-service&gt;\n\n        ## Data Structure\n\n        The data parameter consists of up to 30 statuses, each status contains multiple fields.\n\n        Field Delimiter - ,\n        Output Delimiter - ;\n\n        ## Example data\n\n        Send three statuses from 10:00AM to 10:10AM in a single batch request\n\n        `data=\"20110112,10:00,705,1029;20110112,10:05,775,1320;20110112,10:10,800,800\"`\n\n        ## Donation features\n\n        * The d date parameter must be not be older than 90 days from the current date.\n        * Extended parameters v7, v8, v9, v10, v11 and v12\n        * Maximum energy consumption v3 value increased to 9,999,999Wh\n        * Maximum power consumption v4 value increased to 2,000,000W\n        * Increased batch status size to 100 from 30\n        \"\"\"\n        payload = {\n            \"data\": data,\n        }\n        if c1:\n            payload[\"c1\"] = \"1\"\n        if n:\n            payload[\"n\"] = \"1\"\n\n        url, method = utils.URLS[\"addbatchstatus\"]\n        self.validate_data(payload, ADDBATCHSTATUS_PARAMETERS)\n        url, method = utils.URLS[\"addstatus\"]\n        return self._call(endpoint=url, data=payload, method=method)\n\n    def addstatus(\n        self,\n        data: Dict[str, Any],\n    ) -&gt; requests.Response:\n        \"\"\"The Add Status service accepts live output data\n        at the Status Interval (5 to 15 minutes) configured for the system.\n\n        API Spec: https://pvoutput.org/help/api_specification.html#add-status-service\n\n        :param data: The status data\n        :type data: dict\n\n        :returns: The response object\n        :rtype: requests.Response\n        \"\"\"\n        # if you don't set a time, set it to now\n        # can't push this through the validator as it relies on the class config\n        if \"t\" not in data:\n            data[\"t\"] = self.get_time_by_base()\n        self.validate_data(data, ADDSTATUS_PARAMETERS)\n\n        url, method = utils.URLS[\"addstatus\"]\n\n        return self._call(endpoint=url, data=data, method=method)\n\n    def addoutput(\n        self,\n        data: Dict[str, Any],\n    ) -&gt; requests.Response:\n        \"\"\"The Add Output service uploads end of day output information.\n        It allows all of the information provided on the Add Output page to be uploaded.\n\n        API Spec: https://pvoutput.org/help/api_specification.html#add-output-service\n\n        :param data: The output data to upload\n        :type data: dict\n\n        :returns: The response object\n        :rtype: requests.Response\n        \"\"\"\n        self.validate_data(data, ADDOUTPUT_PARAMETERS)\n        url, method = utils.URLS[\"addoutput\"]\n        return self._call(endpoint=url, data=data, method=method)\n\n    def delete_status(self, date_val: datetime.date, time_val: Optional[datetime.time] = None) -&gt; requests.Response:\n        \"\"\"\n        Deletes a given status, based on the provided parameters\n        needs a datetime() object\n        set the hours/minutes to non-zero to delete a specific time\n\n        API spec: https://pvoutput.org/help/api_specification.html#delete-status-service\n\n        :param date_val: The date to delete.\n        :type date_val: datetime.datetime.date\n\n        :param time_val: The time entry to delete.\n        :type time_val: datetime.datetime.time\n\n        :returns: The response object\n        :rtype: requests.Response\n        \"\"\"\n        self.validate_data(\n            {\n                \"date_val\": date_val,\n                \"time_val\": time_val,\n            },\n            DELETESTATUS_PARAMETERS,\n        )\n\n        data = {\"d\": date_val.strftime(\"%Y%m%d\")}\n        if time_val is not None:\n            data[\"t\"] = time_val.strftime(\"%H:%M\")\n\n        url, method = utils.URLS[\"deletestatus\"]\n\n        return self._call(endpoint=url, data=data, method=method)\n\n    def getstatus(self) -&gt; Dict[str, Any]:\n        \"\"\"The Get Status service retrieves system status information and live output data.\n\n        API spec: https://pvoutput.org/help/api_specification.html#get-status-service\n\n        :returns: the last updated data\n        :rtype: dict\n        \"\"\"\n        # TODO: extend this, you can do history searches and all sorts with this endpoint\n\n        params = {}\n        if self.donation_made:\n            params[\"ext\"] = 1\n            params[\"sid\"] = self.systemid\n        url, method = utils.URLS[\"getstatus\"]\n        response = self._call(endpoint=url, params=params, method=method)\n        response.raise_for_status()\n        # grab all the things\n        responsedata, extras = utils.responsedata_to_response(response.text.split(\",\"))\n\n        # if we're fancy, we get more data\n        if extras:\n            for i in range(1, 7):\n                responsedata[f\"v{i + 6}\"] = None if extras[i - 1] == \"NaN\" else float(extras[i - 1])\n        return responsedata\n\n    def register_notification(self, appid: str, url: str, alerttype: int) -&gt; requests.Response:\n        \"\"\"The Register Notification Service allows a third party application\n        to receive PVOutput alert callbacks via a HTTP end point.\n\n        API spec: https://pvoutput.org/help/api_specification.html#register-notification-service\n\n        All parameters are mandatory\n\n        :param appid: Application ID (eg: example.app.id)\n        :type appid: str (maxlen: 100)\n\n        :param url: Callback URL (eg: http://example.com/api/)\n        :type url: str (maxlen: 150)\n\n        :param alerttype: Alert Type (See list below)\n        :type alerttype: int\n\n        :return: The response object\n        :rtype: requests.Response\n\n        Alert Type list:\n\n        =====   ====\n        Value   Type\n        =====   ====\n        0       All Notifications\n        1       Private Message\n        3       Joined Team\n        4       Added Favourite\n        5       High Consumption Alert\n        6       System Idle Alert\n        8       Low Generation Alert\n        11      Performance Alert\n        14      Standby Cost Alert\n        15      Extended Data V7 Alert\n        16      Extended Data V8 Alert\n        17      Extended Data V9 Alert\n        18      Extended Data V10 Alert\n        19      Extended Data V11 Alert\n        20      Extended Data V12 Alert\n        23      High Net Power Alert\n        24      Low Net Power Alert\n        =====   ====\n        \"\"\"\n\n        self.validate_data(\n            {\n                \"appid\": appid,\n                \"url\": url,\n                \"alerttype\": alerttype,\n            },\n            REGISTER_NOTIFICATION_PARAMETERS,\n        )\n\n        call_url, method = utils.URLS[\"registernotification\"]\n        params = {\"appid\": appid, \"type\": alerttype, \"url\": url}\n        return self._call(endpoint=call_url, params=params, method=method)\n\n    def deregister_notification(self, appid: str, alerttype: int) -&gt; requests.Response:\n        \"\"\"The Deregister Notification Service removes registered notifications under an application id for a system.\n\n        API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service\n\n        All parameters are mandatory\n\n        :param appid: Application ID (eg: example.app.id)\n        :type appid: str (maxlen: 100)\n\n        :param alerttype: Alert Type (See list below)\n        :type alerttype: int\n\n        :return: The response object\n        :rtype: requests.Response\n\n        Alert Type list:\n\n        =====   ====\n        Value   Type\n        =====   ====\n        0       All Notifications\n        1       Private Message\n        3       Joined Team\n        4       Added Favourite\n        5       High Consumption Alert\n        6       System Idle Alert\n        8       Low Generation Alert\n        11      Performance Alert\n        14      Standby Cost Alert\n        15      Extended Data V7 Alert\n        16      Extended Data V8 Alert\n        17      Extended Data V9 Alert\n        18      Extended Data V10 Alert\n        19      Extended Data V11 Alert\n        20      Extended Data V12 Alert\n        23      High Net Power Alert\n        24      Low Net Power Alert\n        =====   ====\n        \"\"\"\n\n        self.validate_data(\n            {\n                \"appid\": appid,\n                \"alerttype\": alerttype,\n            },\n            DELETE_NOTIFICATION_PARAMETERS,\n        )\n\n        url, method = utils.URLS[\"deregisternotification\"]\n        params = {\"appid\": appid, \"type\": alerttype}\n        return self._call(endpoint=url, params=params, method=method)\n</code></pre>"},{"location":"api/#pvoutput.PVOutput.__init__","title":"<code>__init__(apikey, systemid, donation_made=False, stats_period=5, session=None)</code>","text":"<p>Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool</p> Source code in <code>pvoutput/__init__.py</code> <pre><code>def __init__(\n    self,\n    apikey: str,\n    systemid: int,\n    donation_made: bool = False,\n    stats_period: int = 5,\n    session: Optional[requests.Session] = None,\n):\n    \"\"\"Setup code\n    :param apikey: API key (read or write)\n    :type apikey: str\n    :param systemid: system ID\n    :type systemid: int\n    :param donation_made: Whether to use the donation-required fields\n    :type donation_made: bool\n    \"\"\"\n    super().__init__(\n        apikey=apikey,\n        systemid=systemid,\n        donation_made=donation_made,\n        stats_period=stats_period,\n    )\n    self.session = session\n    if session is None:\n        self.session = requests.Session()\n</code></pre>"},{"location":"api/#pvoutput.PVOutput.addbatchstatus","title":"<code>addbatchstatus(data, c1=False, n=False)</code>","text":""},{"location":"api/#pvoutput.PVOutput.addbatchstatus--add-batch-status-service","title":"Add Batch Status Service","text":"<p>The Add Batch Status service adds up to 30 statuses in a single request. See the documentation on the page for what it means, and what it responds with. This hasn't been tested. https://pvoutput.org/help/api_specification.html#add-batch-status-service</p>"},{"location":"api/#pvoutput.PVOutput.addbatchstatus--data-structure","title":"Data Structure","text":"<p>The data parameter consists of up to 30 statuses, each status contains multiple fields.</p> <p>Field Delimiter - , Output Delimiter - ;</p>"},{"location":"api/#pvoutput.PVOutput.addbatchstatus--example-data","title":"Example data","text":"<p>Send three statuses from 10:00AM to 10:10AM in a single batch request</p> <p><code>data=\"20110112,10:00,705,1029;20110112,10:05,775,1320;20110112,10:10,800,800\"</code></p>"},{"location":"api/#pvoutput.PVOutput.addbatchstatus--donation-features","title":"Donation features","text":"<ul> <li>The d date parameter must be not be older than 90 days from the current date.</li> <li>Extended parameters v7, v8, v9, v10, v11 and v12</li> <li>Maximum energy consumption v3 value increased to 9,999,999Wh</li> <li>Maximum power consumption v4 value increased to 2,000,000W</li> <li>Increased batch status size to 100 from 30</li> </ul> Source code in <code>pvoutput/__init__.py</code> <pre><code>def addbatchstatus(self, data: str, c1: bool = False, n: bool = False) -&gt; requests.Response:\n    \"\"\"\n    # Add Batch Status Service\n\n    The Add Batch Status service adds up to 30 statuses in a single request.\n    See the documentation on the page for what it means, and what it responds with.\n    This hasn't been tested.\n    &lt;https://pvoutput.org/help/api_specification.html#add-batch-status-service&gt;\n\n    ## Data Structure\n\n    The data parameter consists of up to 30 statuses, each status contains multiple fields.\n\n    Field Delimiter - ,\n    Output Delimiter - ;\n\n    ## Example data\n\n    Send three statuses from 10:00AM to 10:10AM in a single batch request\n\n    `data=\"20110112,10:00,705,1029;20110112,10:05,775,1320;20110112,10:10,800,800\"`\n\n    ## Donation features\n\n    * The d date parameter must be not be older than 90 days from the current date.\n    * Extended parameters v7, v8, v9, v10, v11 and v12\n    * Maximum energy consumption v3 value increased to 9,999,999Wh\n    * Maximum power consumption v4 value increased to 2,000,000W\n    * Increased batch status size to 100 from 30\n    \"\"\"\n    payload = {\n        \"data\": data,\n    }\n    if c1:\n        payload[\"c1\"] = \"1\"\n    if n:\n        payload[\"n\"] = \"1\"\n\n    url, method = utils.URLS[\"addbatchstatus\"]\n    self.validate_data(payload, ADDBATCHSTATUS_PARAMETERS)\n    url, method = utils.URLS[\"addstatus\"]\n    return self._call(endpoint=url, data=payload, method=method)\n</code></pre>"},{"location":"api/#pvoutput.PVOutput.addoutput","title":"<code>addoutput(data)</code>","text":"<p>The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded.</p> <p>API Spec: https://pvoutput.org/help/api_specification.html#add-output-service</p> <p>:param data: The output data to upload :type data: dict</p> <p>:returns: The response object :rtype: requests.Response</p> Source code in <code>pvoutput/__init__.py</code> <pre><code>def addoutput(\n    self,\n    data: Dict[str, Any],\n) -&gt; requests.Response:\n    \"\"\"The Add Output service uploads end of day output information.\n    It allows all of the information provided on the Add Output page to be uploaded.\n\n    API Spec: https://pvoutput.org/help/api_specification.html#add-output-service\n\n    :param data: The output data to upload\n    :type data: dict\n\n    :returns: The response object\n    :rtype: requests.Response\n    \"\"\"\n    self.validate_data(data, ADDOUTPUT_PARAMETERS)\n    url, method = utils.URLS[\"addoutput\"]\n    return self._call(endpoint=url, data=data, method=method)\n</code></pre>"},{"location":"api/#pvoutput.PVOutput.addstatus","title":"<code>addstatus(data)</code>","text":"<p>The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system.</p> <p>API Spec: https://pvoutput.org/help/api_specification.html#add-status-service</p> <p>:param data: The status data :type data: dict</p> <p>:returns: The response object :rtype: requests.Response</p> Source code in <code>pvoutput/__init__.py</code> <pre><code>def addstatus(\n    self,\n    data: Dict[str, Any],\n) -&gt; requests.Response:\n    \"\"\"The Add Status service accepts live output data\n    at the Status Interval (5 to 15 minutes) configured for the system.\n\n    API Spec: https://pvoutput.org/help/api_specification.html#add-status-service\n\n    :param data: The status data\n    :type data: dict\n\n    :returns: The response object\n    :rtype: requests.Response\n    \"\"\"\n    # if you don't set a time, set it to now\n    # can't push this through the validator as it relies on the class config\n    if \"t\" not in data:\n        data[\"t\"] = self.get_time_by_base()\n    self.validate_data(data, ADDSTATUS_PARAMETERS)\n\n    url, method = utils.URLS[\"addstatus\"]\n\n    return self._call(endpoint=url, data=data, method=method)\n</code></pre>"},{"location":"api/#pvoutput.PVOutput.check_rate_limit","title":"<code>check_rate_limit()</code>","text":"<p>Makes a call to the site, checking if you have hit the rate limit.</p> <p>API spec: https://pvoutput.org/help/api_specification.html#rate-limits</p> <p>:returns: the headers relating to the rate limit. :rtype: dict</p> Source code in <code>pvoutput/__init__.py</code> <pre><code>def check_rate_limit(self) -&gt; Dict[str, str]:\n    \"\"\"Makes a call to the site, checking if you have hit the rate limit.\n\n    API spec: https://pvoutput.org/help/api_specification.html#rate-limits\n\n    :returns: the headers relating to the rate limit.\n    :rtype: dict\n    \"\"\"\n    headers = self._headers()\n    headers[\"X-Rate-Limit\"] = \"1\"\n\n    url, method = utils.URLS[\"getsystem\"]\n\n    response = self._call(endpoint=url, params={}, headers=headers, method=method)\n    retval = utils.get_rate_limit_header(response)\n    return retval\n</code></pre>"},{"location":"api/#pvoutput.PVOutput.delete_status","title":"<code>delete_status(date_val, time_val=None)</code>","text":"<p>Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time</p> <p>API spec: https://pvoutput.org/help/api_specification.html#delete-status-service</p> <p>:param date_val: The date to delete. :type date_val: datetime.datetime.date</p> <p>:param time_val: The time entry to delete. :type time_val: datetime.datetime.time</p> <p>:returns: The response object :rtype: requests.Response</p> Source code in <code>pvoutput/__init__.py</code> <pre><code>def delete_status(self, date_val: datetime.date, time_val: Optional[datetime.time] = None) -&gt; requests.Response:\n    \"\"\"\n    Deletes a given status, based on the provided parameters\n    needs a datetime() object\n    set the hours/minutes to non-zero to delete a specific time\n\n    API spec: https://pvoutput.org/help/api_specification.html#delete-status-service\n\n    :param date_val: The date to delete.\n    :type date_val: datetime.datetime.date\n\n    :param time_val: The time entry to delete.\n    :type time_val: datetime.datetime.time\n\n    :returns: The response object\n    :rtype: requests.Response\n    \"\"\"\n    self.validate_data(\n        {\n            \"date_val\": date_val,\n            \"time_val\": time_val,\n        },\n        DELETESTATUS_PARAMETERS,\n    )\n\n    data = {\"d\": date_val.strftime(\"%Y%m%d\")}\n    if time_val is not None:\n        data[\"t\"] = time_val.strftime(\"%H:%M\")\n\n    url, method = utils.URLS[\"deletestatus\"]\n\n    return self._call(endpoint=url, data=data, method=method)\n</code></pre>"},{"location":"api/#pvoutput.PVOutput.deregister_notification","title":"<code>deregister_notification(appid, alerttype)</code>","text":"<p>The Deregister Notification Service removes registered notifications under an application id for a system.</p> <p>API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service</p> <p>All parameters are mandatory</p> <p>:param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100)</p> <p>:param alerttype: Alert Type (See list below) :type alerttype: int</p> <p>:return: The response object :rtype: requests.Response</p> <p>Alert Type list:</p> <p>=====   ==== Value   Type =====   ==== 0       All Notifications 1       Private Message 3       Joined Team 4       Added Favourite 5       High Consumption Alert 6       System Idle Alert 8       Low Generation Alert 11      Performance Alert 14      Standby Cost Alert 15      Extended Data V7 Alert 16      Extended Data V8 Alert 17      Extended Data V9 Alert 18      Extended Data V10 Alert 19      Extended Data V11 Alert 20      Extended Data V12 Alert 23      High Net Power Alert 24      Low Net Power Alert =====   ====</p> Source code in <code>pvoutput/__init__.py</code> <pre><code>def deregister_notification(self, appid: str, alerttype: int) -&gt; requests.Response:\n    \"\"\"The Deregister Notification Service removes registered notifications under an application id for a system.\n\n    API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service\n\n    All parameters are mandatory\n\n    :param appid: Application ID (eg: example.app.id)\n    :type appid: str (maxlen: 100)\n\n    :param alerttype: Alert Type (See list below)\n    :type alerttype: int\n\n    :return: The response object\n    :rtype: requests.Response\n\n    Alert Type list:\n\n    =====   ====\n    Value   Type\n    =====   ====\n    0       All Notifications\n    1       Private Message\n    3       Joined Team\n    4       Added Favourite\n    5       High Consumption Alert\n    6       System Idle Alert\n    8       Low Generation Alert\n    11      Performance Alert\n    14      Standby Cost Alert\n    15      Extended Data V7 Alert\n    16      Extended Data V8 Alert\n    17      Extended Data V9 Alert\n    18      Extended Data V10 Alert\n    19      Extended Data V11 Alert\n    20      Extended Data V12 Alert\n    23      High Net Power Alert\n    24      Low Net Power Alert\n    =====   ====\n    \"\"\"\n\n    self.validate_data(\n        {\n            \"appid\": appid,\n            \"alerttype\": alerttype,\n        },\n        DELETE_NOTIFICATION_PARAMETERS,\n    )\n\n    url, method = utils.URLS[\"deregisternotification\"]\n    params = {\"appid\": appid, \"type\": alerttype}\n    return self._call(endpoint=url, params=params, method=method)\n</code></pre>"},{"location":"api/#pvoutput.PVOutput.getstatus","title":"<code>getstatus()</code>","text":"<p>The Get Status service retrieves system status information and live output data.</p> <p>API spec: https://pvoutput.org/help/api_specification.html#get-status-service</p> <p>:returns: the last updated data :rtype: dict</p> Source code in <code>pvoutput/__init__.py</code> <pre><code>def getstatus(self) -&gt; Dict[str, Any]:\n    \"\"\"The Get Status service retrieves system status information and live output data.\n\n    API spec: https://pvoutput.org/help/api_specification.html#get-status-service\n\n    :returns: the last updated data\n    :rtype: dict\n    \"\"\"\n    # TODO: extend this, you can do history searches and all sorts with this endpoint\n\n    params = {}\n    if self.donation_made:\n        params[\"ext\"] = 1\n        params[\"sid\"] = self.systemid\n    url, method = utils.URLS[\"getstatus\"]\n    response = self._call(endpoint=url, params=params, method=method)\n    response.raise_for_status()\n    # grab all the things\n    responsedata, extras = utils.responsedata_to_response(response.text.split(\",\"))\n\n    # if we're fancy, we get more data\n    if extras:\n        for i in range(1, 7):\n            responsedata[f\"v{i + 6}\"] = None if extras[i - 1] == \"NaN\" else float(extras[i - 1])\n    return responsedata\n</code></pre>"},{"location":"api/#pvoutput.PVOutput.register_notification","title":"<code>register_notification(appid, url, alerttype)</code>","text":"<p>The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point.</p> <p>API spec: https://pvoutput.org/help/api_specification.html#register-notification-service</p> <p>All parameters are mandatory</p> <p>:param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100)</p> <p>:param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150)</p> <p>:param alerttype: Alert Type (See list below) :type alerttype: int</p> <p>:return: The response object :rtype: requests.Response</p> <p>Alert Type list:</p> <p>=====   ==== Value   Type =====   ==== 0       All Notifications 1       Private Message 3       Joined Team 4       Added Favourite 5       High Consumption Alert 6       System Idle Alert 8       Low Generation Alert 11      Performance Alert 14      Standby Cost Alert 15      Extended Data V7 Alert 16      Extended Data V8 Alert 17      Extended Data V9 Alert 18      Extended Data V10 Alert 19      Extended Data V11 Alert 20      Extended Data V12 Alert 23      High Net Power Alert 24      Low Net Power Alert =====   ====</p> Source code in <code>pvoutput/__init__.py</code> <pre><code>def register_notification(self, appid: str, url: str, alerttype: int) -&gt; requests.Response:\n    \"\"\"The Register Notification Service allows a third party application\n    to receive PVOutput alert callbacks via a HTTP end point.\n\n    API spec: https://pvoutput.org/help/api_specification.html#register-notification-service\n\n    All parameters are mandatory\n\n    :param appid: Application ID (eg: example.app.id)\n    :type appid: str (maxlen: 100)\n\n    :param url: Callback URL (eg: http://example.com/api/)\n    :type url: str (maxlen: 150)\n\n    :param alerttype: Alert Type (See list below)\n    :type alerttype: int\n\n    :return: The response object\n    :rtype: requests.Response\n\n    Alert Type list:\n\n    =====   ====\n    Value   Type\n    =====   ====\n    0       All Notifications\n    1       Private Message\n    3       Joined Team\n    4       Added Favourite\n    5       High Consumption Alert\n    6       System Idle Alert\n    8       Low Generation Alert\n    11      Performance Alert\n    14      Standby Cost Alert\n    15      Extended Data V7 Alert\n    16      Extended Data V8 Alert\n    17      Extended Data V9 Alert\n    18      Extended Data V10 Alert\n    19      Extended Data V11 Alert\n    20      Extended Data V12 Alert\n    23      High Net Power Alert\n    24      Low Net Power Alert\n    =====   ====\n    \"\"\"\n\n    self.validate_data(\n        {\n            \"appid\": appid,\n            \"url\": url,\n            \"alerttype\": alerttype,\n        },\n        REGISTER_NOTIFICATION_PARAMETERS,\n    )\n\n    call_url, method = utils.URLS[\"registernotification\"]\n    params = {\"appid\": appid, \"type\": alerttype, \"url\": url}\n    return self._call(endpoint=call_url, params=params, method=method)\n</code></pre>"}]}