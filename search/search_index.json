{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pvoutput PVOutput.org python API module. Works with the R2 API version spec here . Get your API key from the account page on PVOutput Example usage Here's a quick code example: from pvoutput import PVOutput import json apikey = 'aaaaaabbbbbbccccccddddddeeeeeeffffffgggg' systemid = 12345 pvo = PVOutput(apikey=apikey, systemid=systemid) print(json.dumps(pvo.check_rate_limit(), indent=2)) Will give you output like this: { \"X-Rate-Limit-Remaining\": \"271\", \"X-Rate-Limit-Limit\": \"300\", \"X-Rate-Limit-Reset\": \"1570597200\" } There are more example code snippets in the examples directory. Installing Prod-ish usage python -m pip install pvoutput to install from pypi Dev Install Things python -m venv venv source venv/bin/activate python -m pip install --upgrade pip flit python -m flit install Input validation This is handled by the pvoutput.base.PVOutputBase.validate_data function. It expects the input data and a dict of configuration parameters, which are described in the table below: Field name Required Valid Types Description type Yes Any This is a python type object to match against the field type. required No bool This defines if the field is required. description No Any This is currently unused, but typically holds the description from the PVOutput API Docs donation_required No bool If set to true, and the user's not donated, it'll throw a DonationRequired exception if the user tries to use functionality that requires them to have donated. It's a whole thing. maxlen No int Maximum length of the field. ie. if len(field) > maxlen: raise ValueError maxval No int Maximum value of the field. minval No int Minimum value of the field. additional_validators No List[function] A list of functions to run against the field, which should throw exceptions if something's wrong. An example configuration \"date_val\": { \"required\": True, \"description\": \"Date\", \"type\": date, \"donation_required\": False, \"additional_validators\" : [ validate_delete_status_date ] } Contributing / Testing pylint , black and mypy should all pass before submitting a PR. License MIT License (see LICENSE ), don't use this for anything you care about - I don't provide a warranty at all, and it'll likely steal your socks and underfeed your dog. Changelog 0.0.1 Initial version 0.0.2 2019-10-12 Fixed some bugs 0.0.3 2019-10-13 Added PVOutput.getstatus() which returns the current status as a dict 0.0.4 2019-11-05 Code cleanup using sonarqube, added an error check for registernotification 0.0.5 Asyncio things 0.0.6 I broke the build when uploading to pypi, fixed in 0.0.7. 0.0.7 2021-12-27 #117 fix for getstatus issues 0.0.8 2022-01-02 @cheops did great work cleaning up a lot of my mess, and testing is much better. 0.0.10 2022-08-27 Added explicit timeouts to HTTP connections in the synchronous client. 0.0.11 2022-08-27 Added explicit timeouts to HTTP connections in the aiohttp client.","title":"Home"},{"location":"#pvoutput","text":"PVOutput.org python API module. Works with the R2 API version spec here . Get your API key from the account page on PVOutput","title":"pvoutput"},{"location":"#example-usage","text":"Here's a quick code example: from pvoutput import PVOutput import json apikey = 'aaaaaabbbbbbccccccddddddeeeeeeffffffgggg' systemid = 12345 pvo = PVOutput(apikey=apikey, systemid=systemid) print(json.dumps(pvo.check_rate_limit(), indent=2)) Will give you output like this: { \"X-Rate-Limit-Remaining\": \"271\", \"X-Rate-Limit-Limit\": \"300\", \"X-Rate-Limit-Reset\": \"1570597200\" } There are more example code snippets in the examples directory.","title":"Example usage"},{"location":"#installing","text":"","title":"Installing"},{"location":"#prod-ish-usage","text":"python -m pip install pvoutput to install from pypi","title":"Prod-ish usage"},{"location":"#dev-install-things","text":"python -m venv venv source venv/bin/activate python -m pip install --upgrade pip flit python -m flit install","title":"Dev Install Things"},{"location":"#input-validation","text":"This is handled by the pvoutput.base.PVOutputBase.validate_data function. It expects the input data and a dict of configuration parameters, which are described in the table below: Field name Required Valid Types Description type Yes Any This is a python type object to match against the field type. required No bool This defines if the field is required. description No Any This is currently unused, but typically holds the description from the PVOutput API Docs donation_required No bool If set to true, and the user's not donated, it'll throw a DonationRequired exception if the user tries to use functionality that requires them to have donated. It's a whole thing. maxlen No int Maximum length of the field. ie. if len(field) > maxlen: raise ValueError maxval No int Maximum value of the field. minval No int Minimum value of the field. additional_validators No List[function] A list of functions to run against the field, which should throw exceptions if something's wrong. An example configuration \"date_val\": { \"required\": True, \"description\": \"Date\", \"type\": date, \"donation_required\": False, \"additional_validators\" : [ validate_delete_status_date ] }","title":"Input validation"},{"location":"#contributing-testing","text":"pylint , black and mypy should all pass before submitting a PR.","title":"Contributing / Testing"},{"location":"#license","text":"MIT License (see LICENSE ), don't use this for anything you care about - I don't provide a warranty at all, and it'll likely steal your socks and underfeed your dog.","title":"License"},{"location":"#changelog","text":"0.0.1 Initial version 0.0.2 2019-10-12 Fixed some bugs 0.0.3 2019-10-13 Added PVOutput.getstatus() which returns the current status as a dict 0.0.4 2019-11-05 Code cleanup using sonarqube, added an error check for registernotification 0.0.5 Asyncio things 0.0.6 I broke the build when uploading to pypi, fixed in 0.0.7. 0.0.7 2021-12-27 #117 fix for getstatus issues 0.0.8 2022-01-02 @cheops did great work cleaning up a lot of my mess, and testing is much better. 0.0.10 2022-08-27 Added explicit timeouts to HTTP connections in the synchronous client. 0.0.11 2022-08-27 Added explicit timeouts to HTTP connections in the aiohttp client.","title":"Changelog"},{"location":"api/","text":"Interface to the PVOutput API PVOutput Bases: PVOutputBase This class provides an interface to the pvoutput.org API Source code in pvoutput/__init__.pyclass PVOutput ( PVOutputBase ): \"\"\"This class provides an interface to the pvoutput.org API\"\"\" # pylint: disable=too-many-arguments def __init__ ( self , apikey : str , systemid : int , donation_made : bool = False , stats_period : int = 5 , session : Optional [ requests . Session ] = None , ): \"\"\"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool \"\"\" super () . __init__ ( apikey = apikey , systemid = systemid , donation_made = donation_made , stats_period = stats_period , ) self . session = session if session is None : self . session = requests . Session () def _call ( self , endpoint : str , method : str = \"POST\" , ** kwargs : Dict [ str , Any ], ) -> requests . Response : \"\"\"Makes a call to a URL endpoint with the data/headers/method you require. :param endpoint: The URL to call :type endpoint: str :param data: Data to send :type data: dict :param headers: Additional headers, if unset it'll use self._headers() which is the standard API key / systemid set (eg, self.check_rate_limit) :type headers: dict :param method: specify a method if you want to use something other than POST :type method: str :returns: The response object :rtype: requests.Response :raises TypeError: if the data you pass is of the wrong format. :raises ValueError: if the call throws a HTTP 400 error. :raises requests.exception: if method throws an exception. \"\"\" self . validate_data ( kwargs , CALL_PARAMETERS ) if method == \"GET\" : response = requests . get ( endpoint , data = kwargs . get ( \"data\" ), headers = kwargs . get ( \"headers\" , self . _headers ()), params = kwargs . get ( \"params\" ), timeout = DEFAULT_REQUEST_TIMEOUT , ) elif method == \"POST\" : response = requests . post ( endpoint , data = kwargs . get ( \"data\" ), headers = kwargs . get ( \"headers\" , self . _headers ()), timeout = DEFAULT_REQUEST_TIMEOUT , ) else : raise UnknownMethodError ( f \"unknown method { kwargs [ 'method' ] } \" ) if response . status_code == 400 : # TODO: work out how to get the specific response and provide useful answers raise ValueError ( f \"HTTP400: { response . text . strip () } \" ) # likely errors - https://pvoutput.org/help/api_specification.html#error-messages response . raise_for_status () return response def check_rate_limit ( self ) -> Dict [ str , str ]: \"\"\"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict \"\"\" headers = self . _headers () headers [ \"X-Rate-Limit\" ] = \"1\" url , method = utils . URLS [ \"getsystem\" ] response = self . _call ( endpoint = url , params = {}, headers = headers , method = method ) retval = utils . get_rate_limit_header ( response ) return retval def addstatus ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: requests.Response \"\"\" # if you don't set a time, set it to now # can't push this through the validator as it relies on the class config if \"t\" not in data : data [ \"t\" ] = self . get_time_by_base () self . validate_data ( data , ADDSTATUS_PARAMETERS ) url , method = utils . URLS [ \"addstatus\" ] return self . _call ( endpoint = url , data = data , method = method ) def addoutput ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( data , ADDOUTPUT_PARAMETERS ) url , method = utils . URLS [ \"addoutput\" ] return self . _call ( endpoint = url , data = data , method = method ) def delete_status ( self , date_val : datetime . date , time_val : Optional [ datetime . time ] = None ) -> requests . Response : \"\"\" Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( { \"date_val\" : date_val , \"time_val\" : time_val , }, DELETESTATUS_PARAMETERS , ) data = { \"d\" : date_val . strftime ( \"%Y%m %d \" )} if time_val is not None : data [ \"t\" ] = time_val . strftime ( \"%H:%M\" ) url , method = utils . URLS [ \"deletestatus\" ] return self . _call ( endpoint = url , data = data , method = method ) def getstatus ( self ) -> Dict [ str , Any ]: \"\"\"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict \"\"\" # TODO: extend this, you can do history searches and all sorts with this endpoint params = {} if self . donation_made : params [ \"ext\" ] = 1 params [ \"sid\" ] = self . systemid url , method = utils . URLS [ \"getstatus\" ] response = self . _call ( endpoint = url , params = params , method = method ) response . raise_for_status () # grab all the things responsedata , extras = utils . responsedata_to_response ( response . text . split ( \",\" )) # if we're fancy, we get more data if extras : for i in range ( 1 , 7 ): responsedata [ f \"v { i + 6 } \" ] = ( None if extras [ i - 1 ] == \"NaN\" else float ( extras [ i - 1 ]) ) return responsedata def register_notification ( self , appid : str , url : str , alerttype : int ) -> requests . Response : \"\"\"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"url\" : url , \"alerttype\" : alerttype , }, REGISTER_NOTIFICATION_PARAMETERS , ) call_url , method = utils . URLS [ \"registernotification\" ] params = { \"appid\" : appid , \"type\" : alerttype , \"url\" : url } return self . _call ( endpoint = call_url , params = params , method = method ) def deregister_notification ( self , appid : str , alerttype : int ) -> requests . Response : \"\"\"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"alerttype\" : alerttype , }, DELETE_NOTIFICATION_PARAMETERS , ) url , method = utils . URLS [ \"deregisternotification\" ] params = { \"appid\" : appid , \"type\" : alerttype } return self . _call ( endpoint = url , params = params , method = method ) __init__ ( apikey , systemid , donation_made = False , stats_period = 5 , session = None ) Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool Source code in pvoutput/__init__.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def __init__ ( self , apikey : str , systemid : int , donation_made : bool = False , stats_period : int = 5 , session : Optional [ requests . Session ] = None , ): \"\"\"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool \"\"\" super () . __init__ ( apikey = apikey , systemid = systemid , donation_made = donation_made , stats_period = stats_period , ) self . session = session if session is None : self . session = requests . Session () addoutput ( data ) The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: requests.Response Source code in pvoutput/__init__.py 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 def addoutput ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( data , ADDOUTPUT_PARAMETERS ) url , method = utils . URLS [ \"addoutput\" ] return self . _call ( endpoint = url , data = data , method = method ) addstatus ( data ) The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: requests.Response Source code in pvoutput/__init__.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 def addstatus ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: requests.Response \"\"\" # if you don't set a time, set it to now # can't push this through the validator as it relies on the class config if \"t\" not in data : data [ \"t\" ] = self . get_time_by_base () self . validate_data ( data , ADDSTATUS_PARAMETERS ) url , method = utils . URLS [ \"addstatus\" ] return self . _call ( endpoint = url , data = data , method = method ) check_rate_limit () Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict Source code in pvoutput/__init__.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def check_rate_limit ( self ) -> Dict [ str , str ]: \"\"\"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict \"\"\" headers = self . _headers () headers [ \"X-Rate-Limit\" ] = \"1\" url , method = utils . URLS [ \"getsystem\" ] response = self . _call ( endpoint = url , params = {}, headers = headers , method = method ) retval = utils . get_rate_limit_header ( response ) return retval delete_status ( date_val , time_val = None ) Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: requests.Response Source code in pvoutput/__init__.py 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 def delete_status ( self , date_val : datetime . date , time_val : Optional [ datetime . time ] = None ) -> requests . Response : \"\"\" Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( { \"date_val\" : date_val , \"time_val\" : time_val , }, DELETESTATUS_PARAMETERS , ) data = { \"d\" : date_val . strftime ( \"%Y%m %d \" )} if time_val is not None : data [ \"t\" ] = time_val . strftime ( \"%H:%M\" ) url , method = utils . URLS [ \"deletestatus\" ] return self . _call ( endpoint = url , data = data , method = method ) deregister_notification ( appid , alerttype ) The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== Source code in pvoutput/__init__.py 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 def deregister_notification ( self , appid : str , alerttype : int ) -> requests . Response : \"\"\"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"alerttype\" : alerttype , }, DELETE_NOTIFICATION_PARAMETERS , ) url , method = utils . URLS [ \"deregisternotification\" ] params = { \"appid\" : appid , \"type\" : alerttype } return self . _call ( endpoint = url , params = params , method = method ) getstatus () The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict Source code in pvoutput/__init__.py 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 def getstatus ( self ) -> Dict [ str , Any ]: \"\"\"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict \"\"\" # TODO: extend this, you can do history searches and all sorts with this endpoint params = {} if self . donation_made : params [ \"ext\" ] = 1 params [ \"sid\" ] = self . systemid url , method = utils . URLS [ \"getstatus\" ] response = self . _call ( endpoint = url , params = params , method = method ) response . raise_for_status () # grab all the things responsedata , extras = utils . responsedata_to_response ( response . text . split ( \",\" )) # if we're fancy, we get more data if extras : for i in range ( 1 , 7 ): responsedata [ f \"v { i + 6 } \" ] = ( None if extras [ i - 1 ] == \"NaN\" else float ( extras [ i - 1 ]) ) return responsedata register_notification ( appid , url , alerttype ) The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== Source code in pvoutput/__init__.py 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 def register_notification ( self , appid : str , url : str , alerttype : int ) -> requests . Response : \"\"\"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"url\" : url , \"alerttype\" : alerttype , }, REGISTER_NOTIFICATION_PARAMETERS , ) call_url , method = utils . URLS [ \"registernotification\" ] params = { \"appid\" : appid , \"type\" : alerttype , \"url\" : url } return self . _call ( endpoint = call_url , params = params , method = method )","title":"API Documentation"},{"location":"api/#pvoutput.PVOutput","text":"Bases: PVOutputBase This class provides an interface to the pvoutput.org API Source code in pvoutput/__init__.pyclass PVOutput ( PVOutputBase ): \"\"\"This class provides an interface to the pvoutput.org API\"\"\" # pylint: disable=too-many-arguments def __init__ ( self , apikey : str , systemid : int , donation_made : bool = False , stats_period : int = 5 , session : Optional [ requests . Session ] = None , ): \"\"\"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool \"\"\" super () . __init__ ( apikey = apikey , systemid = systemid , donation_made = donation_made , stats_period = stats_period , ) self . session = session if session is None : self . session = requests . Session () def _call ( self , endpoint : str , method : str = \"POST\" , ** kwargs : Dict [ str , Any ], ) -> requests . Response : \"\"\"Makes a call to a URL endpoint with the data/headers/method you require. :param endpoint: The URL to call :type endpoint: str :param data: Data to send :type data: dict :param headers: Additional headers, if unset it'll use self._headers() which is the standard API key / systemid set (eg, self.check_rate_limit) :type headers: dict :param method: specify a method if you want to use something other than POST :type method: str :returns: The response object :rtype: requests.Response :raises TypeError: if the data you pass is of the wrong format. :raises ValueError: if the call throws a HTTP 400 error. :raises requests.exception: if method throws an exception. \"\"\" self . validate_data ( kwargs , CALL_PARAMETERS ) if method == \"GET\" : response = requests . get ( endpoint , data = kwargs . get ( \"data\" ), headers = kwargs . get ( \"headers\" , self . _headers ()), params = kwargs . get ( \"params\" ), timeout = DEFAULT_REQUEST_TIMEOUT , ) elif method == \"POST\" : response = requests . post ( endpoint , data = kwargs . get ( \"data\" ), headers = kwargs . get ( \"headers\" , self . _headers ()), timeout = DEFAULT_REQUEST_TIMEOUT , ) else : raise UnknownMethodError ( f \"unknown method { kwargs [ 'method' ] } \" ) if response . status_code == 400 : # TODO: work out how to get the specific response and provide useful answers raise ValueError ( f \"HTTP400: { response . text . strip () } \" ) # likely errors - https://pvoutput.org/help/api_specification.html#error-messages response . raise_for_status () return response def check_rate_limit ( self ) -> Dict [ str , str ]: \"\"\"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict \"\"\" headers = self . _headers () headers [ \"X-Rate-Limit\" ] = \"1\" url , method = utils . URLS [ \"getsystem\" ] response = self . _call ( endpoint = url , params = {}, headers = headers , method = method ) retval = utils . get_rate_limit_header ( response ) return retval def addstatus ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: requests.Response \"\"\" # if you don't set a time, set it to now # can't push this through the validator as it relies on the class config if \"t\" not in data : data [ \"t\" ] = self . get_time_by_base () self . validate_data ( data , ADDSTATUS_PARAMETERS ) url , method = utils . URLS [ \"addstatus\" ] return self . _call ( endpoint = url , data = data , method = method ) def addoutput ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( data , ADDOUTPUT_PARAMETERS ) url , method = utils . URLS [ \"addoutput\" ] return self . _call ( endpoint = url , data = data , method = method ) def delete_status ( self , date_val : datetime . date , time_val : Optional [ datetime . time ] = None ) -> requests . Response : \"\"\" Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( { \"date_val\" : date_val , \"time_val\" : time_val , }, DELETESTATUS_PARAMETERS , ) data = { \"d\" : date_val . strftime ( \"%Y%m %d \" )} if time_val is not None : data [ \"t\" ] = time_val . strftime ( \"%H:%M\" ) url , method = utils . URLS [ \"deletestatus\" ] return self . _call ( endpoint = url , data = data , method = method ) def getstatus ( self ) -> Dict [ str , Any ]: \"\"\"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict \"\"\" # TODO: extend this, you can do history searches and all sorts with this endpoint params = {} if self . donation_made : params [ \"ext\" ] = 1 params [ \"sid\" ] = self . systemid url , method = utils . URLS [ \"getstatus\" ] response = self . _call ( endpoint = url , params = params , method = method ) response . raise_for_status () # grab all the things responsedata , extras = utils . responsedata_to_response ( response . text . split ( \",\" )) # if we're fancy, we get more data if extras : for i in range ( 1 , 7 ): responsedata [ f \"v { i + 6 } \" ] = ( None if extras [ i - 1 ] == \"NaN\" else float ( extras [ i - 1 ]) ) return responsedata def register_notification ( self , appid : str , url : str , alerttype : int ) -> requests . Response : \"\"\"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"url\" : url , \"alerttype\" : alerttype , }, REGISTER_NOTIFICATION_PARAMETERS , ) call_url , method = utils . URLS [ \"registernotification\" ] params = { \"appid\" : appid , \"type\" : alerttype , \"url\" : url } return self . _call ( endpoint = call_url , params = params , method = method ) def deregister_notification ( self , appid : str , alerttype : int ) -> requests . Response : \"\"\"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"alerttype\" : alerttype , }, DELETE_NOTIFICATION_PARAMETERS , ) url , method = utils . URLS [ \"deregisternotification\" ] params = { \"appid\" : appid , \"type\" : alerttype } return self . _call ( endpoint = url , params = params , method = method )","title":"PVOutput"},{"location":"api/#pvoutput.PVOutput.__init__","text":"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool Source code in pvoutput/__init__.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def __init__ ( self , apikey : str , systemid : int , donation_made : bool = False , stats_period : int = 5 , session : Optional [ requests . Session ] = None , ): \"\"\"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool \"\"\" super () . __init__ ( apikey = apikey , systemid = systemid , donation_made = donation_made , stats_period = stats_period , ) self . session = session if session is None : self . session = requests . Session ()","title":"__init__()"},{"location":"api/#pvoutput.PVOutput.addoutput","text":"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: requests.Response Source code in pvoutput/__init__.py 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 def addoutput ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( data , ADDOUTPUT_PARAMETERS ) url , method = utils . URLS [ \"addoutput\" ] return self . _call ( endpoint = url , data = data , method = method )","title":"addoutput()"},{"location":"api/#pvoutput.PVOutput.addstatus","text":"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: requests.Response Source code in pvoutput/__init__.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 def addstatus ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: requests.Response \"\"\" # if you don't set a time, set it to now # can't push this through the validator as it relies on the class config if \"t\" not in data : data [ \"t\" ] = self . get_time_by_base () self . validate_data ( data , ADDSTATUS_PARAMETERS ) url , method = utils . URLS [ \"addstatus\" ] return self . _call ( endpoint = url , data = data , method = method )","title":"addstatus()"},{"location":"api/#pvoutput.PVOutput.check_rate_limit","text":"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict Source code in pvoutput/__init__.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def check_rate_limit ( self ) -> Dict [ str , str ]: \"\"\"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict \"\"\" headers = self . _headers () headers [ \"X-Rate-Limit\" ] = \"1\" url , method = utils . URLS [ \"getsystem\" ] response = self . _call ( endpoint = url , params = {}, headers = headers , method = method ) retval = utils . get_rate_limit_header ( response ) return retval","title":"check_rate_limit()"},{"location":"api/#pvoutput.PVOutput.delete_status","text":"Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: requests.Response Source code in pvoutput/__init__.py 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 def delete_status ( self , date_val : datetime . date , time_val : Optional [ datetime . time ] = None ) -> requests . Response : \"\"\" Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( { \"date_val\" : date_val , \"time_val\" : time_val , }, DELETESTATUS_PARAMETERS , ) data = { \"d\" : date_val . strftime ( \"%Y%m %d \" )} if time_val is not None : data [ \"t\" ] = time_val . strftime ( \"%H:%M\" ) url , method = utils . URLS [ \"deletestatus\" ] return self . _call ( endpoint = url , data = data , method = method )","title":"delete_status()"},{"location":"api/#pvoutput.PVOutput.deregister_notification","text":"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== Source code in pvoutput/__init__.py 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 def deregister_notification ( self , appid : str , alerttype : int ) -> requests . Response : \"\"\"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"alerttype\" : alerttype , }, DELETE_NOTIFICATION_PARAMETERS , ) url , method = utils . URLS [ \"deregisternotification\" ] params = { \"appid\" : appid , \"type\" : alerttype } return self . _call ( endpoint = url , params = params , method = method )","title":"deregister_notification()"},{"location":"api/#pvoutput.PVOutput.getstatus","text":"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict Source code in pvoutput/__init__.py 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 def getstatus ( self ) -> Dict [ str , Any ]: \"\"\"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict \"\"\" # TODO: extend this, you can do history searches and all sorts with this endpoint params = {} if self . donation_made : params [ \"ext\" ] = 1 params [ \"sid\" ] = self . systemid url , method = utils . URLS [ \"getstatus\" ] response = self . _call ( endpoint = url , params = params , method = method ) response . raise_for_status () # grab all the things responsedata , extras = utils . responsedata_to_response ( response . text . split ( \",\" )) # if we're fancy, we get more data if extras : for i in range ( 1 , 7 ): responsedata [ f \"v { i + 6 } \" ] = ( None if extras [ i - 1 ] == \"NaN\" else float ( extras [ i - 1 ]) ) return responsedata","title":"getstatus()"},{"location":"api/#pvoutput.PVOutput.register_notification","text":"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== Source code in pvoutput/__init__.py 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 def register_notification ( self , appid : str , url : str , alerttype : int ) -> requests . Response : \"\"\"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"url\" : url , \"alerttype\" : alerttype , }, REGISTER_NOTIFICATION_PARAMETERS , ) call_url , method = utils . URLS [ \"registernotification\" ] params = { \"appid\" : appid , \"type\" : alerttype , \"url\" : url } return self . _call ( endpoint = call_url , params = params , method = method )","title":"register_notification()"}]}